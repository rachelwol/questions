{
    "questions": [
        {
            "question": "מה ההבדל בין Subject ל BehaviorSubject?",
            "answer": "subject מקבל ערך מחזיר אותו ומתאפס, חייבים להרשם אליו עם subscribe ולא מקבל ערך ברירת מחדל. וכן לנרשמים החדשים לא מופיע העדכון האחרון הוא מתחיל לעדכן אותם רק מאז שנרשמו. לעומתו BehaviorSubject שומר את הערך ולא מתאפס, לא חייבים להרשם אליו ניתן לקבל את הנתונים על ידי values() וחובה להגדיר לו ערך ברירת חדל. וכן דוחף את העדכון האחרון לנרשמים החדשים לצינור מידע וממשיך לעדכן אותם בשינויים החדשים מכאן והילך.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין component ל directive?",
            "answer": "לכל אחד הם יש metaData שונה. יש אפשרות רק לרכיב אחד להיות על ה dom ואילו הרבה directives. רכיב משמש לפירוק האפליקציה לרכיבים קטנים ולעומתו directive משמש לעיצוב רכיבים לשימוש חוזר ולהוסיף התנהגויות לרכיב dom קיים וכן ברכיב אחד ניתן להשתמש כמה פעמים באותו directive. כשנרצה לכתוב קוד המתאים לכמה מסכים נכתוב אותו ב directive ודברים שמתאימים לקופוננטה שלנו ספציפית נרשום ב component.",
            "showAnswer": false
        },
        {
            "question": "מה זה Traceur compiler?",
            "answer": "ממיר את ES6 ל ES5 כדי שיתמוך בכל הדפדפנים וכך נוכל לכתוב קוד מתקדם",
            "showAnswer": false
        },
        {
            "question": "מה זה Event Emitter ואיך הוא עובד?",
            "answer": "מחלקה המוגדרת באנגולר core שפולטת ארועים מותאמים אישית ניתן להשתמש בו בקופוננטה וב directive כל שינוי שמתרחש בקופוננטה מופץ לילדים שלה.",
            "showAnswer": false
        },
        {
            "question": "מה זה string interpolation?",
            "answer": "תחביר ל binding משמש להצגת נתונים דינמיים על תבנית ה html כשיש שינוי בקובץ ה ts הוא משתנה אוטומטית גם ב html. התחביר שלו הוא {{}}",
            "showAnswer": false
        },
        {
            "question": "איך יוצרים pipe מותאם אישית באנגולר?",
            "answer": "יוצרים מחלקה המממשת את pipeTransform ומגדירים עליה את הדקורטור pipe המכיל את שם ה Pipe בתוך המחלקה מממשים את הפונקציה transform() המקבלת את ה value שעליו הוגדר ה pipe ויכולה לקבל ערכים נוספים ומחזירה פלט.",
            "showAnswer": false
        },
        {
            "question": "מה זה directive, למה משמש ומתי משתמשים בו?",
            "answer": "זוהי מחלקה המשמשת לכתיבת קוד בתצוגה. יש directives מובנים כמו *ngFor, ngStyle ועוד וניתן ליצור גם לבד. משתמשים בו כדי להחליף אלמנטים פשוטים בדף האינטרנט בתוכן מורכב יותר. יעיל גם כשרוצים לחזור על אותו אלמנט שוב ושוב.",
            "showAnswer": false
        },
        {
            "question": "הסבירי את הפונקציה trackby",
            "answer": "מקבלת את האינדקס ואת הפריט הנוכחי במערך ומחזירה את המזהה היחודי לפריט. וכך במקום לצייר את כל המערך מחדש רק החלק הזה ישתנה.",
            "showAnswer": false
        },
        {
            "question": "מה זה router outlet?",
            "answer": "directive מספריית router המשמש כרכיב ושומר מקום לקופוננטה שה router אמור להציג. לכל outlet ניתן לקרוא בשם, הברירת מחדל הינה primary. ה router outlet פולט ארוע activate האם הקומפוננטה מושמדת או לא.",
            "showAnswer": false
        },
        {
            "question": "מה זה dependency injection?",
            "answer": "הזרקת תלויות. כאשר רוצים להשתמש ברכיב מסוים בקומפוננטה אחרת צריך להגדיר אותו כ injectable ולהזריק אותו בבנאי של המחלקה הצורכת וכך ניתן להשתמש בו בלי שיש צורך ליצור מופע חדש.",
            "showAnswer": false
        },
        {
            "question": "מה זה pipe באנגולר?",
            "answer": "זוהי דרך להציג את הנתונים בצורה אחרת ממה שהם מבלי לשנות את ערכי המקור. זה כמו צינור שמצד אחד נעביר את הנתונים כמו שהם ומצד שני יצאו נתונים אחרים מבלי שהמקור ישתנה. ישנם pipes מובנים כמו date, lowercase ועוד. וכן ניתן ליצור pipes מותאמים אישית. ה pipe מכיל פונקציה בשם transform שמקבלת value שזה הערך שעליו ה pipe מוגדר ויכולה לקבל פרמטרים נוספים ומחזירה פלט.",
            "showAnswer": false
        },
        {
            "question": "מה זה lazy loading?",
            "answer": "טעינה עצלה. מאפשר לטעון חלקי קוד שונים לפי דרישה. זה ממהר את טעינת האפליקציה כי היא טוענת רק את החלקים שהמשתמש רוצה לראות.",
            "showAnswer": false
        },
        {
            "question": "איך מכריזים על משתנה גלובלי?",
            "answer": "מגדירים אותו כ 'use strict' ומייצאים את המשתנה כ export ובמקום שנרצה אותו נייבא אותו עם import.",
            "showAnswer": false
        },
        {
            "question": "מה זה SPA?",
            "answer": "Single Page Application דף html אחד שאיתו עובדים לכל אורך הדרך. דף זה עולה כשנטענת האפליקציה ואין תחלופה של דפי html וכאשר משנים ברמת ה js את התצוגה בפועל של ה html ב dom זה נעשה באופן מאד מהיר, בהבזק זמן שהמשתש לא מרגיש כלל.",
            "showAnswer": false
        },
        {
            "question": "מה זה אנגולר?",
            "answer": "אנגולר זוהי טכנולוגית צד לקוח המאפשרת התנהגויות שעד היום היו רק בשרת בצד לקוח. מאפשרת פיתוח קצה לקצה, כוללת binds, שרותים, הזרקות, מודולים ושכבות, מחלקות, ירושות ועוד. אנגולר אומרת שניתן לפתח אפליקציה שלימה בצד לקוח בשונה ממה שהיה עד היום שצד הלקוח כלל רק התעסקות סביב הדף עצמו ללא טכנולוגיה. אנגולר כתובה בשפת ts.",
            "showAnswer": false
        },
        {
            "question": "הסבירי modules:",
            "answer": "זהו כלי בתוך המערכת שכולל בתוכו אוסף של התנהגויות שונות בנושא משותף. בכל אפליקציית אנגולר יש לפחות מודול אחד- מודול השורש. במקרה שיש לנו אפליקציה גדולה ומורכבת נרצה ליצור מודולים קטנים כדי שיהיה ברור יותר. כדי להגדיר מודול נשתמש בדקורטור @ngModule המכיל בתוכו: imports- מערך המכיל את כל המודולים הנצרכים למודול זה. declarations- מערך המכיל את כל המחלקות הנצרכות במודול זה. providers- מערך המכיל את כל המחלקות המוגדרות כ dependency injection. exports - מערך המכיל את המחלקות שאנחנו רוצים לחשוף למודולים אחרים מחוץ למודול שלנו. bootstrap- מערך המכיל את המחלקות שברצוננו להריץ בהעלאת האתר. לרוב יכיל רק מחלקה אחת?",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין observable ל subject?",
            "answer": "1. עם observable אנחנו יותר מגיבים למה שקורה בתוכם ופחות יש לנו שליטה עליהם, הם יותר פסיביים ואין כל כך דרך לשנות את הערכים שלהם. כשנרצה לשלוט על מה שקורה בתוך ה observable ולהחליט מה יצא ומתי נשתמש ב subject. 2. ה observable הוא עבור הצרכן, ניתן להירשם אליו על ידי subscribe. ו observer הינו ממשק המשמש להזנת נתונים ל observable. ואילו subject מיישם גם את ממשק ה observable וגם את ממשק ה observer. 3. כל מי שנרשם ל subject יקבל את אותם נתונים כאשר הוא יפיק נתונים חדשים. בשונה מ observable שכל מנוי גורם לביצוע עצמאי של observable.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין observable ל promise?",
            "answer": "observable יכול לקרוא ל next מספר פעמים לעומתו promise רק פעם אחת. ב promise הפונקציה האסינכרונית תרוץ פעם אחת לכל המאזינים וב observable היא תרוץ עבור כל מאזין. אם אין subscribe ל observable הוא לא ירוץ בכלל ואילו ב promise גם אם מורידים את המאזינים הפונקציה תרוץ בכל מקרה פעם אחת. ל observable יש פונקציות לטיפול בארועים מספריית rxjs.",
            "showAnswer": false
        },
        {
            "question": "מה כל רכיב באנגולר עושה ולמה משתמשים בו?",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "איך ניתן לשמור שינויים באנגולר שגם לאחר שירעננו הנתונים ישמרו",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "מה בודקים כאשר הדף נטען באיטיות ורואים שהבעיה לא בטעינת הנתונים?",
            "answer": "1. בודקים מה קורה מאז שהנתונים הגיעו, את הפונקציות שופעלות ובודקת אם יש סיבה לכך שהם איטיות, אולי לשנות כתיבה, להשתמש בספריות אחרות, לחפש מה הדרך היעילה יותר לכתוב את הפונקציה.2. יש תוספים ואתרים שמריצים ל ,URL ומפענחים את הPERFORMANCE3. בדיקת שימוש נכון במטמון. ? 4. לבדוק אם יש אפשרות להעביר את זה להליך מקביל שיעשה את הפונקציה מאחורי הקלעים וכשתצרוך שימוש רוב העבודה כבר תיגמר וזה יעלה מהר יותר.5. לבדוק אם האתר נטען על שרת מרוחק.6. לבדוק אם טוען את כל האתר בפעם אחת לעשות טעינה עצלה.7. הקוד מחכה לתגובה ממערכות אחרות?8. בדיקת ביצועים-Performance9. הטענה בשלבים 10. בודקת שלא מתבצע משהו נוסף בדרך שמאט את התהליך כו קריאת שרת נוספת או קריאה לפונקציה שלא נצרכת מיד..",
            "showAnswer": false
        },
        {
            "question": "איך ניתן ליעל ביצועים באנגולר?",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "מה זה zone.js ולמה הוא משמש אותנו באנגולר?",
            "answer": "zone הינו מנגנון המשמש את אנגולר כדי לעקוב אחר שינויים שקורים באפליקציה. כברירת מחדל אנגולר תפעיל זיהוי שינויים בכל רכיב בכל פעם שמשהו בפליקציה משתנה. זה יכול להיות יקר אז אנגולר מאפשרת ליצור zones ולציין אילו רכיבים יש לבדוק כאשר משהו באפליקציה משתנה. בדרך זו ניתן לשלוט מתי ובאיזו תדירות ה change detection מופעל, מה שיכול לעזור לשפר את הביצועים.",
            "showAnswer": false
        },
        {
            "question": "איך ניתן לטעון service?",
            "answer": "1. ע''י הזרקה בבנאי של המחלקה הצורכת 2. ב providers של במחלקה.",
            "showAnswer": false
        },
        {
            "question": "כיצד ניתן לטעון קומפוננטת בן באופן דינאמי - רק באופן יזום",
            "answer": "1. יצירת משתנה שמכיל false וכשרוצים שיוצג להגדיר אותו כ true 2. ",
            "showAnswer": false
        },
        {
            "question": "איך ניתן באמצעות rxjs לעשות 2 פעולות אחת אחרי השניה- כששומרים את הנתונים קודם יבדוק הרשאות ורק אחר כך לבצע שמירה.",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "מה זה reactive forms למה משתמשים בו?",
            "answer": "זוהי ספריית בניית קבצים עבור אנגולר המקלה על יצירת טפסים תגובתיים. טופס תגובתי הוא כזה שמעדכן אוטומטית את נתוני הטופס כאשר הנתונים הבסיסיים משתנים. זה יכל להיות שימושי עבור דברים כמו שמירת טופס מסונכרן עם מסד נתונים.",
            "showAnswer": false
        },
        {
            "question": "מה זה singleton ואיך זה משמש עם service?",
            "answer": "זה מופע בודד, בעצם service הינו singleton כי הוא משמש לכמה קומפוננטות במקביל ומציג את אותם נתונים.",
            "showAnswer": false
        },
        {
            "question": "מתי service הוא לא singleton?",
            "answer": "כאשר נגדיר אותו ב providers של הקומפוננטה הצורכת",
            "showAnswer": false
        },
        {
            "question": "מה זה ngrx ולמה משמש?",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "מה היתרונות לשימוש ב store באנגולר2?",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "מה זה Reducers ב rxjs",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "מה זה piure ב pipe (שיש לי מערך מספרים שה Pipe ממיין ולפעמים הוא ממיין ולפעמים לא, כשמוסיפים ערך, ובמקום שה pipe ימיין אותו הוא שם אותו במקום האחרון במערך. בעקרון הערך ברירת מחדל שלו הוא false ניתן להגדיר אותו כ true",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "מה זה קומפוננטה?",
            "answer": "חבילה שיש בתוכה את כל מה שרכיב צריך. כל קומפוננטה מכילה 2 חלקים, החלק הלוגי והחלק הויזואלי. החלק הלוגי זוהי המחלקה המכילה את המאפיינים והמתודות וכותבים אותו ב ts. החלק הויזואלי מכיל את ה html שיוצג בדפדפן וישתמש בנתוני המחלקה. ה metadata של הקומפוננטה בנוי מסלקטור המכיל את השם שאיתו ניגש לקומפוננטה כשנרצה להשתמש בה, template שיכיל html או ניתוב אליו ו style המכיל את ה css. מחזור חיי הקומפוננטה: אנגולר מייצר את הקומפוננטה, מרנדר אותה, מייצר את הילדים שלה, מרנדר אותם, בודק שינויים במידע שמחובר אליה ולבסוף משמיד אותה. ישנם 3 ארועים ראשיים במחזור חיי הקומפוננטה: ngOnInit() בעת טעינת הקומפוננטה אחרי שאנגולר יוצר את הקשר בין הנתונים למודל. ngOChange() כשיש שינוי בנתונים שקשורים למודל. יש אפשרות לקבל בחזרה את הערך לפני ואחרי השינוי והאם זהו השינוי הראשון. ngOnDestroy() בעת הריסת הקומפוננטה כשיוצאים ממנה, כאן מטפלים בכל מה שנשאר פתוח כו timer, observable ועוד.",
            "showAnswer": false
        },
        {
            "question": "מה זה cache ואיפה נעשה אותו באנגולר?",
            "answer": "Cache זהו זיכרון מטמון שנשמור בו את הנתונים ששלפנו מה DB ובפעם הבאה כשנצטרך את הנתונים נשלוף אותם ממנו וככה זה חוסך את הזמן של הקריאה לשרת. באנגולר ניישם אותו ב service שייגש ל api וישלוף ממנו את הנתונים.",
            "showAnswer": false
        },
        {
            "question": "מה זה interceptor ולמה זה משמש?",
            "answer": "התפקיד של ה interceptor הוא לתפוס כל קריאת HTTP לשרת ולבצע עליה שינוי ממש לפני השליחה, ניתן גם לשרשר מספר interceptors אחד אחרי השני אם יש צורך, כאשר כל אחד מבצע את השינויים שהוא צריך. אחרי שכל השרשרת הסתיימה הבקשה תשלח.",
            "showAnswer": false
        },
        {
            "question": "מה זה redux ואיזה בעיות הוא פותר?",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "מה שמים ב providers של ה module?",
            "answer": "הגדרת השרותים שהמודול צורך.",
            "showAnswer": false
        },
        {
            "question": "מה זה ההגדרה @Inject בבנאי? ",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "במה עדיף להשתמש ב Subject או BehaviorSubject?",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "למה להשתמש דוקא באנגולר כשרוצים לפתח אתר?",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "סוג מה ההבדל בין POST ל GET",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "תני דוגמא לדוקרטור באנגולר ",
            "answer": "עדיין אין תשובה",
            "showAnswer": false
        },
        {
            "question": "מה זה angular routing?",
            "answer": "דרך לנהל את המצבים או התצוגות השונות של יישום אנגלר. זה מאפשר להגדיר כתובות url שונות עבור חלקים שונים של האפליקציה ולמפות את הכתובות הללו לקומפוננטות המתאימות. מאפשר גם לציין אילו רכיבים יש להציג כאשר משתמש לכתובת url ספציפית.",
            "showAnswer": false
        },
        {
            "question": "מהם התכונות העיקריות של router באנגולר2?",
            "answer": "ספרית ניתוב רבת עוצמה המאפשרת למפתחים ליצור אפליקציות של עמוד אחד עם יכולות ניתוב עשירות. הנתב קל לשימוש וניתן להגדיר אותו כך שיעבוד עם מגוון רחב של חלקים אחוריים שונים. הנתב תומך גם בטעינה עצלה מה שיכול לשפר את הביצועים באפליקציות גדולות.",
            "showAnswer": false
        },
        {
            "question": "איך אתה מגדיר route באפליקציה הבנויה באנגולר2?",
            "answer": "מגדירים אותו ע''י דירקטיב בשם @RouteConfig. דירקטיב זה לוקח מערך של תצורות נתב כאשר כל תצורת נתב הוא אוביקט המסמן את ה path של הנתב. הקומפוננטה שתשמש עבור הנתב וכל צאצאי הנתב שאולי יש לו.",
            "showAnswer": false
        },
        {
            "question": "איך ניתן להעביר פרמטרים דרך route?",
            "answer": "באנגולר ניתן להעביר פרמטרים לנתבים כדי לציין לאיזה נתונים תרצה לגשת או לבצע מניפולציות. כדי לעשות זאת משתמשים ב routerLink- לוקח מערך של פרמטרים כאשר כל פרמטר הוא זוג מפתח וערך. המפתח הוא שם הפרמטר והערך הוא הנתונים שברצונך להעביר.",
            "showAnswer": false
        },
        {
            "question": "מהם Auxiliary routes, מתי הייתם משתמשים בהם?",
            "answer": "נתבי עזר משמשים להוספת פונקציונליות ליישום אנגולר מעבר לניתוב הרגיל. ניתן להשתמש בהם ליצירת נתבי ילדים, נתבים שנטענים בטעינה עצלה, או כדי לספק נתונים נוספים לקומפוננטה.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין routerLink ל href? במה עדיף להשתמש בהגדרת route?",
            "answer": "ההבדל העיקרי הוא ש routerLink משמש להגדרת נתבים בתוך יישום האנגולר ואילו href משמש להגדרת נתבים למשאבים חיצוניים. בעת הגדרת נתבים בתוך יישום האנגולר, נשתמש תמיד ב routerLink כדי להבטיח שהלוגיקה של הניתוב מטופלת כהלכה.",
            "showAnswer": false
        },
        {
            "question": "איך משתמשים ב wildcard router באנגולר?",
            "answer": "שימושיים למצבים שבהם אנחנו רוצים להפנות משתמשים לדף ספציפי אם הם מכניסים כתובת url שגויה. לדוגמא אם יש לנו אתר עם כתובת www.example.com/products ומשתמש נסה לעבור אל www.example.com/product נוכל להפנות אותו אל הדף הנכון באמצעות router עם תווים כלליים.",
            "showAnswer": false
        },
        {
            "question": "באילו דרכים נוכל להפנות בקשות באמצעות routes באנגולר?",
            "answer": "ישנם כמה דרכים. 1. להשתמש ב rouerLink- ניתן להשתמש בהנחייה זו על תגי עוגן והיא תיצור אוטומטית את תכונת href בהתבסס על הנתב שאתה מספק. 2. הפניית בקשות למשתמש בשיטת router.navigate פונקציה זו לוקחת מערך של פקודות ומנוטת לאוביקט תוספות. האוביקט תוספות יכול לשמש לדברים ספציפיים כמו query params ומזהי קטע.",
            "showAnswer": false
        },
        {
            "question": "תן כמה דוגמאות לסיטואציות ש router guards יכול להיות שימושי",
            "answer": "ניתן להשתמש בשומרי נתיבים במספר מצבים על מנת להגן על נתבים מפני גישה לא מורשית. לדוגמא תוכל להשתמש ב route guard כדי למנוע ממשתמש גישה לנתב אם הוא לא חובר או אם אין לו הרשאות מתאימות.",
            "showAnswer": false
        },
        {
            "question": "תוכל להראות לי דוגמא למימוש lazy loading באפליקצית אנגולר?",
            "answer": "טעינה עצלה היא טכניקה לטעינת מודולים רק כאשר יש בהם צורך, במקום לטעון את כולם מראש. זה יכול לשפר את הביצועים של אפליקציית אנגולר במיוחד אם יש הרבה מודולים. כדי ליישם טעינה עצלה, ניתן להשתמש בפונקציה loadChild() בתצורת הנתב. פונקציה זו לוקחת פונקציה שמחזירה הבטחה למודול שאמור להטען.לאחר מכן המודול יטען עם גישה לנתב.",
            "showAnswer": false
        },
        {
            "question": "האם יש בעיות הקשורות לשימוש בנתבים מקוננים או ילדים אם כן מהם?",
            "answer": "ישנן כמה בעיות פונקציונאליות הקשורות לשימוש בנתב מקונן או ילד. 1. אם נתב הבן מושבת, אז גם נתב האב שלו יושבת. זה יכול להוביל להתנהגות בלתי צפויה עבור המשתמש. 2. אם נתיב או צאצא לא מוגדר כהלכה, הוא עלול לגרום לבעיות בניתוב של האפליקציה כולה.",
            "showAnswer": false
        },
        {
            "question": "מה הכוונה בטעינה עצלה?",
            "answer": "טעינה עצלה היא טכניקה המשמשת באנגולר לטעינת מודולים רק כשהם נחוצים, במקום לטעון את כל המודולים מראש. זה יכול לשפר את הביצועים של יישום האנגולר מכיון שהדפדפן לא יצטרך לטעון קוד מיותר. טעינה עצלה משמשת בדרך כלל ליישומים גדולים עם מודולים רבים שבהם לא צריך לטעון את כל המודולים באופן מיידי.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין loadChildren ל children באנגולר?",
            "answer": "loadChildren מששמש לטעינת קומפוננטות עצלה בעוד ש children משמש לטעינת קומפוננטות eagerly (בשקיקה). עם loadChildren הקומפוננטה לא נטענת עד עד שמשתמשים בניווט של הנתב. עם children הקומפוננטות נטענות מיידית.",
            "showAnswer": false
        },
        {
            "question": "למה צריך ליישם בדיקות אימות עבור נתבים מסוימים?",
            "answer": "נחוץ על מנת להבטיח שרק משתמשים מורשים יוכלו לגשת למידע שנמצא מאחורי הנתבים הללו. אם האנשים הלא נכונים יוכלו לקבל גישה למידע מסוים זה עלול להוביל להשלכות אבטחה חמורות.",
            "showAnswer": false
        },
        {
            "question": "מה קורה אם לשני נתבים יש ערכי path שונים אך חולקים את אותו ערך data?",
            "answer": "הנתב ישתמש בנתב הראשון שהוא נתקל בו עם ערך נתונים תואם. זה יכול לגרום להתנהגות בלתי צפויה, לכן בדרך כלל עדיף להמנע משני נתבים בעלי אותו data value.",
            "showAnswer": false
        },
        {
            "question": "כיצד ניתן לקבל את כתובת האתר של העמוד הנוכחי ביישום אנגולר שלי?",
            "answer": "על ידי שימוש ב router service - יש לו מתודה הנקראית routerState שמחזירה observable של מצב הנתב הנוכחי. ניתם להרשם אליו כדי לקבל את כתובת האתר הנוכחית.",
            "showAnswer": false
        },
        {
            "question": "תאר איך עובד הניווט באנגולר",
            "answer": "אנגולר משתמש בנתב מבוסס קומפוננטות כדי לטפל בניווט. המשמעות היא שיש קומפוננטה יעודית לכל נתב והנתב יציג אוטומטית את הקומפוננטה הנכונה עבור הנתב הנוכחי. הנתב גם דואג לעדכון אוטומטי של כתובת ה url כך שתתאים למסלול הנוכחי, והוא יכול גם לטפל בדברים כמו העברת פרמטרים לרכיבים.",
            "showAnswer": false
        },
        {
            "question": "מה הדרך הטובה ביותר לטפל בשגיאות תוך כדי פתרון נתבים באנגולר? ",
            "answer": "שימוש בפונקציית מטפל השגיאות שמסופקת על ידי השרות $route. פנקציה זו תטפל בכל שגיאה המתרחשת במהלך פתרון הנתב, ותספק הודעת שגיאה מועילה למשתמש.",
            "showAnswer": false
        },
        {
            "question": "מנקודת מבט של ביצועים, איזו גישה יש להעדיף lazy loading או preloading?",
            "answer": "lazy loading היא הגישה העדיפה מבחינת ביצועים. הסיבה לכך היא שהיא מאפשרת לאפליקציה לטעון רק את הרכיבים הדרושים לפי הצורך, מה שיכול לעזור לשפר את זמני הטעינה. טעינה מוקדמת לעומת זאת, טוענת את כל הקומפוננטות מראש ללא קשר לשאלה אם יש צורך בהם או ל, מה שעלול להוביל לזמני טעינה ארוכים יותר.",
            "showAnswer": false
        },
        {
            "question": "האם ניתן לרנדר קומפוננטות ספציפיות על סמך הנתב באנגולר? אם כן אז איך?",
            "answer": "כן זה אפשרי. ניתן לעשות זאת באמצעות הדירקטיב router-outlet שאומר לקומפוננטה היכן למקם את הקומפוננטות המעובדות על סמך הנתב הנוכחי.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין קומפוננטה למודול באנגולר2?",
            "answer": "קומפוננטות שולטות בתצוגות (html) וכן מתקשרות עם קומפוננטות ושירותים אחרים כדי להביא פונקציונליות לאפליקציה שלך. מודולים מכילים קומפוננטה אחת ו יותר הם לא שולטים בשום html. המודולים מצהירים איזה קומפוננטות יכולות להשתמש בקומפוננטות אחרות השייכות למודולים אחרים, אילו מחלקות יוזרקו על ידי ה dependency injection ואיזה קומפוננטה תקבל אתחול. מודולים מאפשרים לך לנהל את הקומפוננטות כדי להביא מודולריות לאפליקציה.",
            "showAnswer": false
        },
        {
            "question": "מה זה pure pipe?",
            "answer": "צינורות אלו הם צינורות המשתמשים בפונקציות טהורות. כתוצאה מכך צינור טהור אינו משתמש בשום מצב פנימי והפלט נשאר זהה כל עוד הפרמטרים שהועברו נשארים זהים. אנגולר קורא לצינור רק כאשר הוא מזהה שינוי בפרמטרים המועברים. מופע יחיד של צינור טהור משמש בכל הקומפוננטות.",
            "showAnswer": false
        },
        {
            "question": "מה זה impure pipes?",
            "answer": "עבור כל מחזור זיהוי שינויים באנגולר נקרא צינור לא טהור ללא קשר לשינוי בשדות הקלט. נוצרים מופעי צינור מרובים עבור צינורות אלה. כניסות המועברות לצינורות אלה יכולות להיות ניתנות לשינוי. כברירת מחדל כל הצינורות טהורים. עם זאת ניתן לציין צינורות לא טהורים באמצעות המאפיין pure. בתוך המטה דטה של ה pipe יקבל שם ו pure עם הערך true או false.",
            "showAnswer": false
        },
        {
            "question": "מה זה npm? מה הוא נותן מעבר לחבילות קוד?",
            "answer": "כלי לניהול ספריות קוד של node.js אותן ניתן לייבא לפריקט, נותן ניהול גירסאות בנוסף לספריות.",
            "showAnswer": false
        },
        {
            "question": "מה זה cli?",
            "answer": "כלי המאפשר הרצת פקודות ב command line וכך יותר קבצי קוד באופן אוטומטי, להריץ את הפרויקט ועוד.",
            "showAnswer": false
        },
        {
            "question": "אלו פקודות את מכירה ב cli? האם הוא דורש התקנה?",
            "answer": "ng new, ng serve וכו. יש להתקינו מקומית במחשב ע''י הפקודה npm install @angular/cli",
            "showAnswer": false
        },
        {
            "question": "באיזה קובץ מותקנות כל חבילות האפליקציה?",
            "answer": "בקובץ package.json המנהל את כל הספריות בהן תלוי הפרויקט.",
            "showAnswer": false
        },
        {
            "question": "מה אומרת התחילית ^ ומה אומרת התחילית ~?",
            "answer": "התחילית ^ אומרת להביא את התת גירסה הכי גדולה שקיימת אבל בגירסה הנוכחית. התחילית ~: קבלת הגירסה האחרונה של סיפריה זו.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין dependencies לבין devDependencies?",
            "answer": "dependencies- בו מוגדרות ספריות שהפרויקט עושה בהן שימוש והן חייבות להמצא יחד עם הקוד של האפליקציה. האפליקציה לא תעבוד בלעדיהם. devDependencies- ספריות שנצרכות רק בזמן הפיתוח ולאחר שהקוד מוכן לשימוש אין בהם צורך. כמו ts.",
            "showAnswer": false
        },
        {
            "question": "מה ניתן לעשות עם ה scripts בקובץ package.json?",
            "answer": "ניתן להגדיר בו script מותאם אישית שיורץ על ידי npm run ושם הסקריפט וכך נגדיר בו רצף של פקודות שניתן לבצע על ידי הרצת שם הסקריפט בלבד.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל העיקרי בין reactive forms ל template driven?",
            "answer": "צורות מונחות תבנית עוסקות יותר במבנה הטופס, בעוד שצורות תגובתיות עוסקות יותר בהתנהגות הטופס. עם טפסים מונחי תבנית, אתה אחראי על יצירת הטופס כולו בתבנית, כולל כל שדות הקלט, אימות וטיפול בהגשה. עם טפסים תגובתיים לעומת זת, אתה יוצר את הטופס במחלקה הרכיבים ולאחר מכן קושר אותו לתבנית. זה נותן לך יותר שליטה על הטופס אבל גם יותר קשה להגדיר אותו.",
            "showAnswer": false
        },
        {
            "question": "מה היתרונות בשימוש ב reactive forms על פני template driver forms?",
            "answer": "טפסים ריאקטיביים מציעים יותר גמישות ושליטה על אימות הטפסים. עם טפסים מונחי תבנית האימות נעשה בדרך כלל באמצעות הנחיות, שעלול להיות קשה לשלוט בהן. טפסים תגובתיים מאפשרים גם אימות מורכב יותר כגון אימות חוצה שדות.",
            "showAnswer": false
        },
        {
            "question": "איך יצרים reactiveForms באנגולר?",
            "answer": "ניתן ליצור טופס תגובתי באנגולר באמצעות המחלקה FormBuilder. מחלקה זו מספקת דרך נוחה ליצור ולנהל טפסים.",
            "showAnswer": false
        },
        {
            "question": "מהי הדרך הטובה ביותר לעבוד עם טפסים מקוננים מורכבים?",
            "answer": "אין תשובה חד משמעית לשאלה זו, מכיון שהדרך הטובה ביותר לעבוד עם טפסים מקוננים מורכבים משתנה בהתאם לפרטים הספציפיים של הטופס המדובר. עם זאת, כמה עצות שעשויות להיות מועילות כוללות פרוק הטופס לחתיכות קטנות יותר הניתנות לניהול, שימוש ב formArray לניהול קבוצות של פקדי טפסים ושימוש ב formGroupName כדי לאגד פקדי טפסים לקבוצת טפסים ספציפית.",
            "showAnswer": false
        },
        {
            "question": "האם זה אפשרי להשתמש באימות מבוסס תבנית יחד עם reactive forms באנגולר? אם כן אז איך? ",
            "answer": "כן, אפשר להשתמש באימות מבוסס תבנית יחד עם reactive forms ניתן לעשות זאת כל ידי שימוש בהנחיית ng-template. הנחיה זו מאפשרת להגדיר תבנית שתשמש לאימות הטופס.",
            "showAnswer": false
        },
        {
            "question": "למה להשתמש ב valuesChanges() עבור פקד טופס תגובתי?",
            "answer": "valuesChanges יתן לך את הערך הנוכחי של הפקד בעוד ש statusChanges יתן את סטטוס האימות של הפקד. לכן, אם אתה מעוניין בערך הפקד תשתמש ב valuesChanges",
            "showAnswer": false
        },
        {
            "question": "מה עושה המאפיין errorStateMatcher ברכיב אנגלר?",
            "answer": "המאפיין errorStateMatcher משמש כדי לעקף את התנהגות ברירת המחדל של התאמת השגיאות באנגולר. יכול להיות שימושי כאשר רוצים להתאים אישית את האופן שבו אנגולר קובע אם פקד טופס צריך להיחשב לא חוקי.",
            "showAnswer": false
        },
        {
            "question": "מהו השימוש בשיטת setValidators() כאשר משתמשים באוביקט בקרת טופב באנגלר?",
            "answer": "השיטה setValidators משמשת כדי להגדיר את המאמתים שישמשו לאימות אובייקט בקרת הטופס. זה משמש בדרך כלל כאשר רוצים להוסיף מאמתים חדשים לאוביקט בקרת הטופס או כאשר רוצים לשנות את המאמתים הקיימים שנמצאים בשימוש.",
            "showAnswer": false
        },
        {
            "question": "מה קורה אם 2 אימותים מחזירים false בזמן עיבוד פקד טופס יחיד?",
            "answer": "אם 2 אימותים או יותר מחזירים false תוך כדי עיבוד פקד טופס יחיד, מודול אנגולר reactive forms יזרוק שגיאה.",
            "showAnswer": false
        },
        {
            "question": "מתי היית בוחר בגישה אחת על פני אחרת (מונעת תבנית לעומת ריאקטיבית באנגולר?",
            "answer": "אין תשובה חד משמעית לשאלה זו, שכן ההחלטה תלויה בדרישות הספציפיות של הפרויקט. עם זאת ניתן לתת כמה הנחיות כלליות. אם עובדים על פרויקט קטן עם טפסים פשוטים, טפסים מונחי תבנית יכולים להיות האפשרות הטובה ביותר. גישה זו בדרך כלל קלה יותר ללמידה ושימוש, כך שהיא עשויה להיות בחירה טובה אם אתה חדש באנגולר. אם עובדים על פרויקט גדול עם צורות מורכבות, טפסים תגובתיים עשויים להיות בחירה טובה יותר. גישה זו מעניקה שליטה רבה יותר על הטפסים, ויכלה להקל על הטיפול באימות ובשגיאות.",
            "showAnswer": false
        },
        {
            "question": "האם אנגולר מספקת תמיכה מובנית כלשהי לטיפול בזרמי נתונים אסינכרוניים המגיעים ממקורות שונים?",
            "answer": "כן, זה נעשה באמצעות observables ואופרטורים.",
            "showAnswer": false
        },
        {
            "question": "מה התפקיד של המחלקה FormBuilder באנגולר?",
            "answer": "אחראית על יצירה וניהול של טפסי אנגולר. מספק דרך נוחה ליצר ולטפל בפקדי טופס, כמו גם לעקוב ולאמת ערכי טופס.",
            "showAnswer": false
        },
        {
            "question": "מה המטרה של הפונקציה compose() באנגולר?",
            "answer": "משמשת ליצירת observable מסדר גבוה יותר, שהוא observable שמורכב ממספר obsrvables אחרים. משמש לעיתים קרובות כאשר עובדים עם זרמי נתונים מרובים שיש לעבד יחד בדרך כלשהי.",
            "showAnswer": false
        },
        {
            "question": "תן דוגמא לשימוש במספר תנאים בתוך validators.compose()",
            "answer": "מקבל מערך של validators מה שאומר שניתן לעבור על תנאים מרובים. לדוגמא אם רוצים ליצור validator שמאפשר רק מספרים חיוביים, ניתן לעשות זאת כך: validators.compose([validatore.required, validator.min(0)]).",
            "showAnswer": false
        },
        {
            "question": "מה תפקידו של האופרטור map באנגולר?",
            "answer": "משמש להמרת נתונים מפורמט אחד לאחר. באנגולר זה משמש לעיתים קרובות כדי להמיר נתונים מ observable לפורמט שיכול לשמש את הרכיב.",
            "showAnswer": false
        },
        {
            "question": "מה תפקידו של האופרטור mergeMap() באנגולר?",
            "answer": "משמש כדי למפות כל ערך הנפלט מהמקור הניתן לצפייה לנתון חדש. ולאחר מכן לשטח את הנצפים המתקבלים לזרם ניתן לצפייה בודד. זה משמש לעיתים קרובות כאשר עובדים עם מקורות נתונים אסינכרוניים כגון בעת ביצוע בקשות HTTP.",
            "showAnswer": false
        },
        {
            "question": "מה החשיבות של rxjs לאנגולר",
            "answer": "rxjs היא ספריה שאנגולר משתמשת בה כדי להקל על העבודה עם נתונים אסינכרוניים. זה חשוב מכיוון שישומי אנגולר צריכים לרוב לעבוד עם נתונים שמגיעים מהשרת או ממקור חיצוני אחר, ונתונים אלו יכולים להגיע בזמנים שונים. על ידי שימוש ב rxjs אנגולר יכולה להתמודד ביתר קלות עם הנתונים האסינכרוניים הללו ולוודא שלאפליקציה יש תמיד את הנתונים המעודכנים ביותר.",
            "showAnswer": false
        },
        {
            "question": "מה זה observables תן דוגמא לשימוש בהם:",
            "answer": "observables הינם סוג של מבנה נתונים שניתן להשתמש בו כדי לייצג נתונים אסינכרוניים. המשמעות היא שניתן להשתמש בהם כדי לייצג נתונים המשתנים עם הזמן, או נתונים שנשלפים ממקור מרוחק. לדוגמא זרם נתונים שנפלט מהשרת.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדלים בין observabels ל promise מתי נשתמש בכל אחד מהם?",
            "answer": "אלו שתי דרכים לטיפול בנתונים אסינכרוניים. observable הינו זרם של נתונים שניתן לפלוט לאורך זמן, בעוד ש promise היא ערך בודד שנפתר בשלב מסוים בעתיד. לעיתים קרובות נעשה שימוש ב promise כאשר צריך לטפל רק בארוע אסינכרון בודד, בעוד ש observables משמשים כאשר צריך לטפל במספר ארועי אסינכרון.",
            "showAnswer": false
        },
        {
            "question": "מה זה change detecion באנגולר",
            "answer": "זוהי מערכת שבודקת אוטומטית שינויים בעץ הרכיבים ומבצעת את השינויים המתאימים ל DOM. תהליך זה מופעל בכל פעם שמשתמש מקיים איטראקציה עם הרכיב, בין אם באמצעות ארוע או קשירת מאפיינים.",
            "showAnswer": false
        },
        {
            "question": "הסבר כיצד אנגולר משתמשת ב data binding כדי לעדכן את התצוגה באופן אוטומטי בכל פעם שמתרחש שינוי במודל?",
            "answer": "אנגולר משתמש ב data binding כדי לשמור על סנכרון התצוגה והמדל. בכל פעם שמתרחש שינוי במודל אנגולר יעדכן את התצוגה כדי לשקף את השינוי הזה. הדבר נעשה באופן אוטומטי, כך שהמשתמש יראה תמיד את המידע המעודכן ביותר.",
            "showAnswer": false
        },
        {
            "question": "איך אנגולר מזהה שינויים במודל?",
            "answer": "אנגולר משתמש במה שנקרא בדיקה מלוכלכת כדי לזהות שינויים בדגם. זה אומר שהוא ישווה את הערך הנוכחי של המודל לערך הקודם כדי לרות אם חל שינוי כלשהו. אם יש שינוי אז אנגולר תעדכן את התצוגה בהתאם.",
            "showAnswer": false
        },
        {
            "question": "האם ניתן להשתמש ב zone.js כדי להפעיל זיהוי שינויים באופן ידני?",
            "answer": "כן זה אפשרי ניתן לעשות זאת באמצעות הפונקציה NgZone.run(). מייבאים את NgZone בבנאי של המחלקה וכך ניתן להשתמש בו.",
            "showAnswer": false
        },
        {
            "question": "מהם התרחישים הנפוצים שבהם ה change detecion לא מצליח לפעול כראוי?",
            "answer": "ישנן כמה סיבות לכך שה change detection עלול להכשל. 1. שינוי תוכן אוביקט במקום יצירת אוביקט חדש. 2. כאשר משתמשים ב observable שאינו מפעיל כראוי זיהוי שינויים. זה יכול לגרום לרכיב לא להתעדכן גם כאשר הנתונים השתנו.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין ZoneAwarePromise ל promise?",
            "answer": "ZoneAwarePromise היא הבטחה שתפעיל את פונקציות ה callback שלה באנגולר zone, אשר הכרחי כדי שזיהוי שינוי אנגולר התרחש. לעומתו promise תפעיל את פונקציות ה callback שלה מחוץ לאנגולר zone. זה יכול להיות שימושי כאשר רוצים להמנע מהפעלת change detection, אבל זה אומר שצריך להפעיל אותו באופן ידני אם רוצים לראות שינויים כלשהם שמתרחשים בתוך ה promise callback.",
            "showAnswer": false
        },
        {
            "question": "מהן כמה מלכודות נפוצות בתכנות אסינכרוני ב js?",
            "answer": "1. אם מנסים לעדכן משתנה שנמצא בשימוש ב callback אסינכרוני, יתכן שאין לה את הערך המעודכן. 2. אם יש שרשרת של פעולות אסינכרוניות, יכול להיות שיהיה קשה לעקוב אחרי הסדר שבו הן יבוצעו. 3. אם ה callback האסינכרוני זורק שגיאה, קשה לאתר היכן התרחשה השגיאה.",
            "showAnswer": false
        },
        {
            "question": "מה אתה מבין ב zone בהקשר לאנגולר?",
            "answer": "zone הינו מנגנון המשמש את אנגולר כדי לעקוב אחר שינויים שקורים באפליקציה. כברירת מחדל אנגולר תפעיל זיהוי שינויים בכל רכיב בכל פעם שמשהו בפליקציה משתנה. זה יכול להיות יקר אז אנגולר מאפשרת ליצור zones ולציין אילו רכיבים יש לבדוק כאשר משהו באפליקציה משתנה. בדרך זו ניתן לשלוט מתי ובאיזו תדירות ה change detection מופעל, מה שיכול לעזור לשפר את הביצועים.",
            "showAnswer": false
        },
        {
            "question": "למה צריך zones באנגולר?",
            "answer": "מכיוון שהם מספקים דרך ליירט ולעקוב אחרי משימות אסינכרוניות שמתרחשות מחוץ למסגר אנגולר. על ידי כך אנגולר יכולה להפעיל אוטומטית זיהוי שינויים כאשר היא מזהה שמשימה אסינכרונית הושלמה, מה שמבטיח שהרכיב תמיד מעודכן.",
            "showAnswer": false
        },
        {
            "question": "מהי מטרת השרות ngZone?",
            "answer": "משמש להפעלת פונקציה בתוך אנגולר change detection zone או מחוצה לו. זה שימושי כדי להבטיח שאנגולר יקלוט שינויים שבוצעו מחוץ למסגרת אנגולר.",
            "showAnswer": false
        },
        {
            "question": "איפה ngZone יכול להיות מוזרק?",
            "answer": "בכל רכיב או שרות אנגולר. שירות זה אחראי על ניהול זיהוי שינויים באפליקציית אנגולר. כברירת מחדל ריצות ה change detection באנגולר בכל הרכיבים בכל פעם שמתרחש ארוע. זה יעול להיות יקר ועלול לגרום לבעיות ביצועים ביישומים גדולים. שירות ngZone מאפשר למפתחים לשלוט מתי ובאיזו תדירות מופעל ה change detection זה יכול לעזור לשפר את הביצועים ביישומים גדולים.",
            "showAnswer": false
        },
        {
            "question": "מהי אסטרטגיית ברירת מחדל של change detection באנגולר?",
            "answer": "בדיקה מלוכלכת - כאשר גלאי השינויים פועל הוא יבדוק את כל ה bindings ברכיב כדי לראות אם הם השתנו. אם אחד מהם השתנה הרכיב יעודכן בהתאם.",
            "showAnswer": false
        },
        {
            "question": "כיצד ניתן לבטל את ה change detection עבור רכיב או directive ספציפיים?",
            "answer": "על ידי הגדרת המאפיין changeDetection של הרכיב או ה directive ל ChangeDetectionStrategy.OnPush",
            "showAnswer": false
        },
        {
            "question": "תאר את תהליך ביצוע זיהוי שינויים באנגולר",
            "answer": "אנגולר change detection הוא תהליך המשמש למעקב אחר שינויים בנתונים הקשורים לאפליקציית אנגולר. תהליך זה מתחיל כאשר אפליקציית אנגולר עולה ולאחר מכן פועל ברקע כדי לבדוק אם יש שינויים. כאשר מזוהה שינוי אנגולר תעדכן את החלקים המתאימים של האפליקציה בהתאם.",
            "showAnswer": false
        },
        {
            "question": "האם תוכל לרשום חלק מהאפליקציות שבהם השימוש ב setTimeOut() עלול להוביל לתוצאות בלתי צפויות?",
            "answer": "ישנן מספר בעיות פוטנציאליות שיכולות לנבוע משימוש ב setTimeOut() באפליקציות אנגולר. 1. אם משתמשים ב setTimeOut() כדי לעכב שינוי במודל, יתכן שהשינוי לא יקלט על ידי מנגנון ה change detection. זה יכול להוביל לתוצאות בלתי צפויות, במיוחד אם מסתמכים על על שינוי המודל כדי להפעיל התנהגות אחרת באפליקציה שלך. 2. כאשר משתמשים ב setTimeOut() כדי לתזמן פונקציה לפעול לאחר פרק זמן יתכן שהפונקציה לא תפעל בזמן המדויק שמצפים לה. הסיבה לכך היא ש setTimeOut() אינו טיימר מובטח - הוא עשוי לפעול מעט מוקדם או מאוחר יותר מהזמן שצוין בהתאם לדפדפן.",
            "showAnswer": false
        },
        {
            "question": "הסבר מה המשמעות של microtasks ו macrotasks?",
            "answer": "microtasks הן משימות שמתבצעות לאחר סיום המשימה הנוכחית. משמשים בדרך כלל לניקוי לאחר פעולה אסינכרונית והם מטופלים על ידי לולאת הארועים של הדפדפן. macrotasks הן משימות שמתבצעות לאחר סיום המשימה הנוכחית אך הן מטופלות על ידי שרשור ממשק המשתמש של הדפדפן.",
            "showAnswer": false
        },
        {
            "question": "כיצד ה web worker משפיע על ה change detection?",
            "answer": "הם מסוגלים להריץ קוד js ברקע ללא תלות בשרשור הראשי של ממשק המשתמש. זה יכול לשמש לביצוע חישובים כבדים או משימות שעלולת לחסום את ממשק המשתמש. אם זאת זה אומר שכל השינויים שיבוצעו ב web worker לא יזוהו על ידי מנגנון ה change detection של אנגולר. זה יכול להוביל להתנהגות בלתי צפויה אם ה web worker משנה נתונים שנמצאים בשימוש על ידי ממשק המשתמש.",
            "showAnswer": false
        },
        {
            "question": "מה זה change detection onPush?",
            "answer": "זוהי אסטרטגיה המשמשת באנגולר כדי להגביל את הפעלת ה change detection. כברירת מחדל אנגולר תפעיל זיהוי שינויים בכל רכיב כל פעם שמשהו משתנה באפליקציה. זה יכול להיות יקר ולכן זיהוי השינויים onPush מגביל אותו לפעול רק כאשר input binding משתנה או כאשר ארוע מופעל מהרכיב.",
            "showAnswer": false
        },
        {
            "question": "מהי המשמעות של המתודה markForCheck() בקשר לזיהוי שינויים?",
            "answer": "זוהי מתודה המשמשת לסימון קומפוננטה ל change detection. זה שימושי כאשר צריך לוודא שרכיב מסומן גם אם לא נעשה בו שימוש פעיל. לדוגמא כאשר יש רכיב המשמש רק כאשר לוחצים על כפתור ניתן להשתמש ב markForCheck() כדי לוודא שהרכיב מסומן לזיהוי שינויים בעת לחיצה על הכפתור.",
            "showAnswer": false
        },
        {
            "question": "הסבר את ההבדל בין המתודות runOutsideAngular() ו run() ב ngZone? איזה מהם עדיף?",
            "answer": "runOutsideAngular מאפשר להפעיל פונקציה מחוץ לאנגולר zone. יכול להיות שימושי כאשר רוצים להמנע מהפעלת ה change detection או אם צריך להריץ משימה ארוכת טווח שלא צריכה להיות רשומה באנגולר. המתודה run מפעילה את הפונקציה בתוך אנגולר zone זוהי התנהגות ברירת מחדל עבור אנגולר והיא בדרך כלל הפונקציה שרוצים. אם זאת ישנם מקרים שבהם צריך להפעיל פונקציה בתוך האנגולר zone כגון כאשר רוצים להפעיל change detection.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין attribute directive ל structual directive?",
            "answer": "attribute directive מגדרים עם * ומשמשים לשינוי פריסת ה DOM על ידי הוספת והסרת אלמנטים. ואילו structual directive מוגדרים ללא כוכבית ומשמשים ליצירת התנהגות וסגנון מותאמים אישית לאלמנטים קיימים על ידי יישום פונקציות או לוגיקה לדוגמא ngStyle",
            "showAnswer": false
        },
        {
            "question": "מהם סוגי ה data binding שיש באנגולר?",
            "answer": "one way data binding - המידע רק מוצג ב html ומתעדכן רק מה ts ישנם 3 סוגים: 1. String Interpolation - ייצוג המידע בתוך זוג צומדיים. 2. property binding - משתנים כמו [src] זה input וכו שנכתבים בתוך הערך. 3. event binding - שליחת ערכים ל ts מה html באמצעות ארוע. דרך שניה two way data binding - העברת מידע בין ה ts ל html ולהיפך. כאשר משנים את הערך ב ts הוא משתנה גם ב html ולהיפך. ניתן לשימוש על ידי ngModel.",
            "showAnswer": false
        },
        {
            "question": "מה ההבדל בין constractor ל ngOnInit?",
            "answer": "הקונסטרקטור היא פונקציה ברירת מחדל של ts מגדירים בה את האתחולים של הקומפוננטה והיא מגדירה מופע חדש של המחלקה new למחלקה. היא לא קשורה לאנגולר. ngOnInit נקראת לאחר הקונסטרקטור, היא חלק ממחזור חיי הקומפוננטה ונקראת אחרי ש ngOnChange נקרא בפעם הראשונה. נשים בה את כל מה שקשור ל binding של אנגולר. ",
            "showAnswer": false
        },
        {
            "question": "מה אתה רואה כאתגר הגדול ביותר בעבודה עם Angular2?",
            "answer": "האתגר הגדול ביותר שאני רואה עם Angular2 הוא שמדובר בפלטפורמה חדשה ומתפתחת. יש עדיין כמה קינקים שצריך לפתור ואני בטוח שאמצא אותם כשאמשיך לעבוד עם הפלטפורמה.",
            "showAnswer": false
        },
        {
            "question": "",
            "answer": "",
            "showAnswer": false
        }
    ]
}